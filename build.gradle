//---------------------------------------------------------------------------------
// PLUGINS
//---------------------------------------------------------------------------------

plugins {
    id 'java'
    id "com.dorongold.task-tree" version "2.1.0"
    id 'checkstyle'
    id 'pmd'
    id 'de.aaschmid.cpd' version '3.3'
    id "com.github.spotbugs" version "5.0.4"
    id 'jacoco'
}

group 'org.kryptokrona.sdk'
version project.properties['kryptokrona.sdk.version']

repositories {
    mavenCentral()
}

//---------------------------------------------------------------------------------
// DEPENDENCIES
//---------------------------------------------------------------------------------

dependencies {
    implementation "io.reactivex.rxjava3:rxjava:3.1.4"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

//---------------------------------------------------------------------------------
// TEST CONFIGURATION
//---------------------------------------------------------------------------------

test {
    useJUnitPlatform()
    failFast = true // stop early to avoid running whole test suit if one fails
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('kryptokrona-sdk-report')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                //TODO: this is set to 0.0 since we do not have implemented proper
                // unit tests yet to cover all code. Set to 0.7 when done.
                minimum = 0.0
            }
        }
    }
}

//---------------------------------------------------------------------------------
// STATIC CODE ANALYSIS CONFIGURATION
//---------------------------------------------------------------------------------

checkstyle {
    toolVersion = '8.12'
    ignoreFailures = false
    configFile = file("${projectDir}/gradle/static-code-analysis/checkstyle/checkstyle.xml")
}

pmd {
    toolVersion = '6.7.0'
    ignoreFailures = false
    ruleSetFiles = files("${projectDir}/gradle/static-code-analysis/pmd/ruleset.xml")
    ruleSets = []
    rulesMinimumPriority = 3
}

cpd {
    language = 'java'
    toolVersion = '6.1.0'
    minimumTokenCount = 200 // approximately 5-10 lines
}

cpdCheck {
    reports {
        text.enabled = true
        xml.enabled = false
    }
    ignoreAnnotations = true
    source = sourceSets.main.allJava // only java, groovy and scala classes in 'main' sourceSets
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$projectDir/build/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
    excludeFilter = file("${projectDir}/gradle/static-code-analysis/spotbugs/spotbugs-exclude.xml")
}


//---------------------------------------------------------------------------------
// TASKS
//---------------------------------------------------------------------------------

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(Pmd) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

task printVersion {
    doLast {
        println project.version
    }
}